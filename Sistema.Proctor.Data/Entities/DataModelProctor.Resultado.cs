//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 12/2/2025 3:01:04 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;

namespace Sistema.Proctor.Data.Entities
{
    public partial class Resultado : INotifyPropertyChanging, INotifyPropertyChanged {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private int _Idresultados;

        private decimal? _Disenada;

        private string _Evaluacion;

        private string _Observacion;

        private decimal? _Obtenida;

        private decimal? _Porcentaje;

        private long? _Identry;

        private int _Idtipofalla;

        private TipoFalla _TipoFalla;

        private Entry _Entry;

        public Resultado()
        {
            OnCreated();
        }

        public int Idresultados
        {
            get
            {
                return this._Idresultados;
            }
            set
            {
                if (this._Idresultados != value)
                {
                    this.SendPropertyChanging("Idresultados");
                    this._Idresultados = value;
                    this.SendPropertyChanged("Idresultados");
                }
            }
        }

        public decimal? Disenada
        {
            get
            {
                return this._Disenada;
            }
            set
            {
                if (this._Disenada != value)
                {
                    this.SendPropertyChanging("Disenada");
                    this._Disenada = value;
                    this.SendPropertyChanged("Disenada");
                }
            }
        }

        public string Evaluacion
        {
            get
            {
                return this._Evaluacion;
            }
            set
            {
                if (this._Evaluacion != value)
                {
                    this.SendPropertyChanging("Evaluacion");
                    this._Evaluacion = value;
                    this.SendPropertyChanged("Evaluacion");
                }
            }
        }

        public string Observacion
        {
            get
            {
                return this._Observacion;
            }
            set
            {
                if (this._Observacion != value)
                {
                    this.SendPropertyChanging("Observacion");
                    this._Observacion = value;
                    this.SendPropertyChanged("Observacion");
                }
            }
        }

        public decimal? Obtenida
        {
            get
            {
                return this._Obtenida;
            }
            set
            {
                if (this._Obtenida != value)
                {
                    this.SendPropertyChanging("Obtenida");
                    this._Obtenida = value;
                    this.SendPropertyChanged("Obtenida");
                }
            }
        }

        public decimal? Porcentaje
        {
            get
            {
                return this._Porcentaje;
            }
            set
            {
                if (this._Porcentaje != value)
                {
                    this.SendPropertyChanging("Porcentaje");
                    this._Porcentaje = value;
                    this.SendPropertyChanged("Porcentaje");
                }
            }
        }

        public long? Identry
        {
            get
            {
                return this._Identry;
            }
            set
            {
                if (this._Identry != value)
                {
                    this.SendPropertyChanging("Identry");
                    this._Identry = value;
                    this.SendPropertyChanged("Identry");
                }
            }
        }

        public int Idtipofalla
        {
            get
            {
                return this._Idtipofalla;
            }
            set
            {
                if (this._Idtipofalla != value)
                {
                    this.SendPropertyChanging("Idtipofalla");
                    this._Idtipofalla = value;
                    this.SendPropertyChanged("Idtipofalla");
                }
            }
        }

        public virtual TipoFalla TipoFalla
        {
            get
            {
                return this._TipoFalla;
            }
            set
            {
                if (this._TipoFalla != value)
                {
                    this.SendPropertyChanging("TipoFalla");
                    this._TipoFalla = value;
                    this.SendPropertyChanged("TipoFalla");
                }
            }
        }

        public virtual Entry Entry
        {
            get
            {
                return this._Entry;
            }
            set
            {
                if (this._Entry != value)
                {
                    this.SendPropertyChanging("Entry");
                    this._Entry = value;
                    this.SendPropertyChanged("Entry");
                }
            }
        }

        #region Extensibility Method Definitions

        partial void OnCreated();

        public override bool Equals(object obj)
        {
          Resultado toCompare = obj as Resultado;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.Idresultados, toCompare.Idresultados))
            return false;

          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + Idresultados.GetHashCode();
          return hashCode;
        }

        #endregion

        public virtual event PropertyChangingEventHandler PropertyChanging;

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
