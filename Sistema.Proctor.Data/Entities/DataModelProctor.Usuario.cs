//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 20/2/2025 9:42:53 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;

namespace Sistema.Proctor.Data.Entities
{
    public partial class Usuario : INotifyPropertyChanging, INotifyPropertyChanged {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private long _Idusuario;

        private bool _Activo;

        private string _Email;

        private string _Nombre;

        private string _Password;

        private string _Titulo;

        private string _Username;

        private DateTime? _CreatedAt;

        private DateTime _UpdatedAt;

        public Usuario()
        {
            OnCreated();
        }

        public long Idusuario
        {
            get
            {
                return this._Idusuario;
            }
            set
            {
                if (this._Idusuario != value)
                {
                    this.SendPropertyChanging("Idusuario");
                    this._Idusuario = value;
                    this.SendPropertyChanged("Idusuario");
                }
            }
        }

        public bool Activo
        {
            get
            {
                return this._Activo;
            }
            set
            {
                if (this._Activo != value)
                {
                    this.SendPropertyChanging("Activo");
                    this._Activo = value;
                    this.SendPropertyChanged("Activo");
                }
            }
        }

        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.SendPropertyChanging("Email");
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                }
            }
        }

        public string Nombre
        {
            get
            {
                return this._Nombre;
            }
            set
            {
                if (this._Nombre != value)
                {
                    this.SendPropertyChanging("Nombre");
                    this._Nombre = value;
                    this.SendPropertyChanged("Nombre");
                }
            }
        }

        public string Password
        {
            get
            {
                return this._Password;
            }
            set
            {
                if (this._Password != value)
                {
                    this.SendPropertyChanging("Password");
                    this._Password = value;
                    this.SendPropertyChanged("Password");
                }
            }
        }

        public string Titulo
        {
            get
            {
                return this._Titulo;
            }
            set
            {
                if (this._Titulo != value)
                {
                    this.SendPropertyChanging("Titulo");
                    this._Titulo = value;
                    this.SendPropertyChanged("Titulo");
                }
            }
        }

        public string Username
        {
            get
            {
                return this._Username;
            }
            set
            {
                if (this._Username != value)
                {
                    this.SendPropertyChanging("Username");
                    this._Username = value;
                    this.SendPropertyChanged("Username");
                }
            }
        }

        public DateTime? CreatedAt
        {
            get
            {
                return this._CreatedAt;
            }
            set
            {
                if (this._CreatedAt != value)
                {
                    this.SendPropertyChanging("CreatedAt");
                    this._CreatedAt = value;
                    this.SendPropertyChanged("CreatedAt");
                }
            }
        }

        public DateTime UpdatedAt
        {
            get
            {
                return this._UpdatedAt;
            }
            set
            {
                if (this._UpdatedAt != value)
                {
                    this.SendPropertyChanging("UpdatedAt");
                    this._UpdatedAt = value;
                    this.SendPropertyChanged("UpdatedAt");
                }
            }
        }

        #region Extensibility Method Definitions

        partial void OnCreated();

        public override bool Equals(object obj)
        {
          Usuario toCompare = obj as Usuario;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.Idusuario, toCompare.Idusuario))
            return false;

          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + Idusuario.GetHashCode();
          return hashCode;
        }

        #endregion

        public virtual event PropertyChangingEventHandler PropertyChanging;

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
